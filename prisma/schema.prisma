// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/database"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum PermissionAction {
  CREATE
  READ
  UPDATE
  DELETE
}

model User {
  id                  Int                  @id @default(autoincrement())
  uuid                String               @unique @default(uuid())
  email               String               @unique
  password            String
  firstName           String?              @map("first_name")
  lastName            String?              @map("last_name")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime?            @updatedAt @map("updated_at")
  isVerified          Boolean              @default(false) @map("is_verified")
  role                Role                 @default(USER)
  verificationTokens  VerificationToken[]
  passwordResetTokens PasswordResetToken[]
  permissions         PermissionOnUser[]

  @@map("users")
}

model Permission {
  id      Int                @id @default(autoincrement())
  action  PermissionAction
  subject String
  users   PermissionOnUser[]

  @@unique([action, subject])
  @@map("permissions")
}

model PermissionOnUser {
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int        @map("user_id")
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId Int        @map("permission_id")
  assignedAt   DateTime   @default(now()) @map("assigned_at")

  @@unique([userId, permissionId])
  @@map("permission_on_users")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_tokens")
}

model Product {
  id          Int      @id @default(autoincrement())
  sku         String   @unique
  name        String
  description String?  @db.Text
  price       Float
  stock       Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("products")
}
